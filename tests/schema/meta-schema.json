{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://json-schema.org/draft/2020-12/schema",
  "$vocabulary": {
    "https://json-schema.org/draft/2020-12/vocab/core": true,
    "https://json-schema.org/draft/2020-12/vocab/applicator": true,
    "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,
    "https://json-schema.org/draft/2020-12/vocab/validation": true,
    "https://json-schema.org/draft/2020-12/vocab/meta-data": true,
    "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,
    "https://json-schema.org/draft/2020-12/vocab/content": true
  },
  "$dynamicAnchor": "meta",
  "title": "Core and Validation specifications meta-schema",
  "allOf": [
    {"$ref": "meta/core"},
    {"$ref": "meta/applicator"},
    {"$ref": "meta/unevaluated"},
    {"$ref": "meta/validation"},
    {"$ref": "meta/meta-data"},
    {"$ref": "meta/format-annotation"},
    {"$ref": "meta/content"}
  ],
  "type": ["object", "boolean"],
  "$comment": "This meta-schema also defines keywords that have appeared in previous drafts in order to prevent incompatible extensions as they remain in common use.",
  "properties": {
    "definitions": {
      "$comment": "\"definitions\" has been replaced by \"$defs\".",
      "type": "object",
      "additionalProperties": { "$dynamicRef": "#meta" },
      "deprecated": true,
      "default": {}
    },
    "dependencies": {
      "$comment": "\"dependencies\" has been split and replaced by \"dependentSchemas\" and \"dependentRequired\" in order to serve their differing semantics.",
      "type": "object",
      "additionalProperties": {
        "anyOf": [
          { "$dynamicRef": "#meta" },
          { "$ref": "meta/validation#/$defs/stringArray" }
        ]
      },
      "deprecated": true,
      "default": {}
    },
    "$recursiveAnchor": {
      "$comment": "\"$recursiveAnchor\" has been replaced by \"$dynamicAnchor\".",
      "$ref": "meta/core#/$defs/anchorString",
      "deprecated": true
    },
    "$recursiveRef": {
      "$comment": "\"$recursiveRef\" has been replaced by \"$dynamicRef\".",
      "$ref": "meta/core#/$defs/uriReferenceString",
      "deprecated": true
    },
    "codelist": {
      "$comment": "A BODS schema property.",
      "title": "Codelist",
      "description": "The filename of a .csv in the BO Data Standard which defines the allowed values for this property.",
      "type": "string"
    },
    "openCodelist": {
      "$comment": "A BODS schema property.",
      "title": "Open Codelist",
      "description": "If true, the property can contain values beyond what is defined in the codelist in the BO Data Standard. If false,the property is restricuted to only the values defined in the codelist.",
      "type": "boolean",
      "default": false
    },
    "version": {
      "$comment": "A BODS schema property.",
      "type": "string"
    },
    "propertyOrder": {
      "$comment": "A BODS schema property.",
      "title": "Property Order",
      "description": "The order in which properties should be displayed for optimised user experience. Properties whose values are not objects or arrays should be listed first.",
      "type": "integer"
    },
    "oneOfEnumSelectorField": {
      "$comment": "A BODS schema property.",
      "name": "oneOf Enum Field",
      "description": "Hints to a validator which subschema to use when validating objects which may use one of several schema options.",
      "type": "string"
    }
  }
}
